// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  summary    String?
  
  // Relations
  messages        Message[]
  guidelineUsages GuidelineUsage[]
  
  @@map("sessions")
}

model Message {
  id        String      @id @default(cuid())
  sessionId String
  role      MessageRole
  content   String
  createdAt DateTime    @default(now())
  
  // Relations
  session        Session         @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  guidelineUsages GuidelineUsage[]
  
  @@map("messages")
}

enum MessageRole {
  user
  assistant
  system
}

model GuidelineUsage {
  id          String   @id @default(cuid())
  sessionId   String
  messageId   String
  guidelineId String
  usedAt      DateTime @default(now())
  
  // Relations
  session   Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  guideline Guideline @relation(fields: [guidelineId], references: [id], onDelete: Cascade)
  
  @@map("guideline_usages")
}

model Guideline {
  id         String         @id @default(cuid())
  title      String
  content    String         // content or action part
  strength   GuidelineStrength
  priority   Int            @default(0)
  triggers   String[]
  active     Boolean        @default(true)
  singleUse  Boolean        @default(false)
  embedding  Bytes?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  guidelineUsages GuidelineUsage[]
  
  @@map("guidelines")
}

enum GuidelineStrength {
  hard
  soft
}
