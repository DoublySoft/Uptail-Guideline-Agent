import { PrismaClient, GuidelineStrength } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding database...');
  
  // Check if guidelines already exist
  const existingCount = await prisma.guideline.count();
  if (existingCount > 0) {
    console.log(`‚úÖ Database already contains ${existingCount} guidelines. Skipping seed.`);
  } else {
    // Create initial guidelines
    const guidelines = [
      {
        title: "Precio",
        content: "Si preguntan precio, no dar cifra y proponer reuni√≥n",
        strength: GuidelineStrength.hard,
        priority: 10,
        triggers: ["precio", "coste", "cu√°nto cuesta", "tarifa"],
        active: true,
        singleUse: false
      },
      {
        title: "Tono",
        content: "Usar un tono cercano y positivo",
        strength: GuidelineStrength.soft,
        priority: 7,
        triggers: [],
        active: true,
        singleUse: false
      },
      {
        title: "Contexto del Cliente",
        content: "Siempre preguntar por el contexto del cliente antes de dar recomendaciones",
        strength: GuidelineStrength.hard,
        priority: 9,
        triggers: ["recomendaci√≥n", "sugerencia", "consejo", "qu√© me recomiendas"],
        active: true,
        singleUse: false
      },
      {
        title: "Jerga T√©cnica",
        content: "Evitar usar jerga t√©cnica sin explicar",
        strength: GuidelineStrength.soft,
        priority: 6,
        triggers: ["t√©cnico", "tecnolog√≠a", "implementaci√≥n", "API", "backend"],
        active: true,
        singleUse: false
      },
      {
        title: "Confirmar Entendimiento",
        content: "Confirmar entendimiento del cliente antes de proceder",
        strength: GuidelineStrength.hard,
        priority: 8,
        triggers: ["proceder", "continuar", "siguiente", "avanzar"],
        active: true,
        singleUse: false
      },
      {
        title: "Personalizaci√≥n",
        content: "Siempre enfatizar la personalizaci√≥n de la soluci√≥n",
        strength: GuidelineStrength.soft,
        priority: 7,
        triggers: ["soluci√≥n", "servicio", "producto", "implementar"],
        active: true,
        singleUse: false
      },
      {
        title: "Seguimiento",
        content: "Proponer seguimiento y soporte continuo",
        strength: GuidelineStrength.soft,
        priority: 6,
        triggers: ["despu√©s", "post-venta", "soporte", "mantenimiento"],
        active: true,
        singleUse: false
      },
      {
        title: "Casos de √âxito",
        content: "Mencionar casos de √©xito relevantes cuando sea apropiado",
        strength: GuidelineStrength.soft,
        priority: 5,
        triggers: ["ejemplos", "casos", "experiencia", "clientes"],
        active: true,
        singleUse: false
      },
      {
        title: "Urgencia",
        content: "Identificar y responder a se√±ales de urgencia del cliente",
        strength: GuidelineStrength.hard,
        priority: 9,
        triggers: ["urgente", "r√°pido", "inmediato", "pronto"],
        active: true,
        singleUse: false
      },
      {
        title: "Objeci√≥n de Precio",
        content: "Cuando hay objeciones de precio, enfocarse en el valor y ROI",
        strength: GuidelineStrength.hard,
        priority: 8,
        triggers: ["caro", "costoso", "no puedo pagar", "presupuesto"],
        active: true,
        singleUse: false
      }
    ];
    
    for (const guideline of guidelines) {
      await prisma.guideline.create({
        data: guideline
      });
      console.log(`‚úÖ Created guideline: ${guideline.title} - ${guideline.content.substring(0, 50)}...`);
    }
    
    console.log(`üéâ Successfully seeded ${guidelines.length} guidelines!`);
  }

  // Check if sessions already exist
  const existingSessionsCount = await prisma.session.count();
  if (existingSessionsCount > 0) {
    console.log(`‚úÖ Database already contains ${existingSessionsCount} sessions. Skipping session seed.`);
  } else {
    // Create sample sessions with realistic conversation flows
    console.log('üìù Creating realistic chat conversations...');

    // SESSION 1: Consulta de servicios empresariales
    const session1 = await prisma.session.create({
      data: {}
    });
    console.log(`‚úÖ Created session 1: ${session1.id}`);

    // User message 1
    await prisma.message.create({
      data: {
        sessionId: session1.id,
        role: 'user',
        content: 'Hola, me interesa saber m√°s sobre sus servicios y qu√© me recomiendan para mi empresa'
      }
    });

    // Assistant response 1
    const message1_2 = await prisma.message.create({
      data: {
        sessionId: session1.id,
        role: 'assistant',
        content: '¬°Hola! Me alegra que te interesen nuestros servicios. Para poder darte la mejor recomendaci√≥n personalizada, ¬øpodr√≠as contarme un poco sobre tu empresa, el sector en el que operas y qu√© tipo de soluciones est√°s buscando? Esto me ayudar√° a entender mejor tus necesidades espec√≠ficas.'
      }
    });

    // User message 2
    await prisma.message.create({
      data: {
        sessionId: session1.id,
        role: 'user',
        content: 'Somos una empresa de tecnolog√≠a que desarrolla software para el sector financiero. Tenemos unos 50 empleados y queremos mejorar nuestros procesos internos'
      }
    });

    // Assistant response 2
    const message1_4 = await prisma.message.create({
      data: {
        sessionId: session1.id,
        role: 'assistant',
        content: 'Perfecto, entiendo tu contexto. El sector financiero tiene requisitos muy espec√≠ficos de seguridad y cumplimiento. Bas√°ndome en tu tama√±o de empresa y sector, te recomendar√≠a empezar con una soluci√≥n de gesti√≥n de proyectos que incluya control de versiones y auditor√≠a de cambios. ¬øTe parece bien si continuamos explorando esta opci√≥n?'
      }
    });

    // User message 3
    await prisma.message.create({
      data: {
        sessionId: session1.id,
        role: 'user',
        content: 'S√≠, suena bien. ¬øCu√°nto tiempo tomar√≠a la implementaci√≥n y cu√°l ser√≠a el costo aproximado?'
      }
    });

    // Assistant response 3
    const message1_6 = await prisma.message.create({
      data: {
        sessionId: session1.id,
        role: 'assistant',
        content: 'Para una empresa de tu tama√±o, estimamos entre 6-8 semanas para la implementaci√≥n completa. En cuanto al costo, prefiero no dar cifras aproximadas sin conocer todos los detalles de tu infraestructura actual. Te propongo agendar una reuni√≥n t√©cnica donde podamos evaluar tu entorno y darte una propuesta personalizada. ¬øTe parece bien programar una llamada para la pr√≥xima semana?'
      }
    });

    // Apply guidelines to assistant messages
    const guidelines1_2 = await prisma.guideline.findMany({
      where: { title: { in: ['Contexto del Cliente', 'Personalizaci√≥n', 'Tono'] } }
    });
    for (const guideline of guidelines1_2) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session1.id,
          messageId: message1_2.id,
          guidelineId: guideline.id
        }
      });
    }

    const guidelines1_4 = await prisma.guideline.findMany({
      where: { title: { in: ['Personalizaci√≥n', 'Casos de √âxito', 'Confirmar Entendimiento'] } }
    });
    for (const guideline of guidelines1_4) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session1.id,
          messageId: message1_4.id,
          guidelineId: guideline.id
        }
      });
    }

    const guidelines1_6 = await prisma.guideline.findMany({
      where: { title: { in: ['Precio', 'Personalizaci√≥n', 'Seguimiento'] } }
    });
    for (const guideline of guidelines1_6) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session1.id,
          messageId: message1_6.id,
          guidelineId: guideline.id
        }
      });
    }

    console.log(`‚úÖ Created session 1 with 6 messages (3 user, 3 assistant)`);

    // SESSION 2: Consulta urgente con presupuesto limitado
    const session2 = await prisma.session.create({
      data: {}
    });
    console.log(`‚úÖ Created session 2: ${session2.id}`);

    // User message 1
    await prisma.message.create({
      data: {
        sessionId: session2.id,
        role: 'user',
        content: '¬øCu√°l es el precio de implementaci√≥n? Necesito algo urgente y tengo un presupuesto limitado'
      }
    });

    // Assistant response 1
    const message2_2 = await prisma.message.create({
      data: {
        sessionId: session2.id,
        role: 'assistant',
        content: 'Entiendo tu urgencia y tu preocupaci√≥n por el presupuesto. Para poder darte una propuesta personalizada que se ajuste a tus necesidades y recursos, me gustar√≠a agendar una reuni√≥n donde podamos revisar tus requerimientos espec√≠ficos. Te aseguro que trabajaremos para encontrar la mejor soluci√≥n dentro de tu presupuesto. ¬øPodemos programar una llamada para ma√±ana mismo?'
      }
    });

    // User message 2
    await prisma.message.create({
      data: {
        sessionId: session2.id,
        role: 'user',
        content: 'No puedo esperar tanto, necesito una respuesta hoy mismo. Mi presupuesto m√°ximo es de 5000‚Ç¨'
      }
    });

    // Assistant response 2
    const message2_4 = await prisma.message.create({
      data: {
        sessionId: session2.id,
        role: 'assistant',
        content: 'Comprendo perfectamente tu urgencia. Con un presupuesto de 5000‚Ç¨, podemos ofrecerte una soluci√≥n b√°sica pero funcional que se implemente en 2-3 d√≠as. Sin embargo, para darte la mejor opci√≥n dentro de tu presupuesto y tiempo, necesito 30 minutos de tu tiempo hoy mismo. ¬øPodemos hacer una llamada r√°pida en la pr√≥xima hora?'
      }
    });

    // User message 3
    await prisma.message.create({
      data: {
        sessionId: session2.id,
        role: 'user',
        content: 'Perfecto, tengo tiempo ahora. ¬øPueden empezar hoy mismo?'
      }
    });

    // Assistant response 3
    const message2_6 = await prisma.message.create({
      data: {
        sessionId: session2.id,
        role: 'assistant',
        content: '¬°Excelente! S√≠, podemos comenzar hoy mismo. Te voy a transferir con nuestro equipo t√©cnico para que hagamos la evaluaci√≥n inmediata y empecemos la implementaci√≥n. Mientras tanto, ¬øpodr√≠as preparar una lista de tus requisitos m√°s cr√≠ticos? Esto nos ayudar√° a optimizar el tiempo y asegurar que la soluci√≥n se ajuste perfectamente a tu presupuesto de 5000‚Ç¨.'
      }
    });

    // Apply guidelines to assistant messages
    const guidelines2_2 = await prisma.guideline.findMany({
      where: { title: { in: ['Urgencia', 'Objeci√≥n de Precio', 'Personalizaci√≥n', 'Seguimiento'] } }
    });
    for (const guideline of guidelines2_2) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session2.id,
          messageId: message2_2.id,
          guidelineId: guideline.id
        }
      });
    }

    const guidelines2_4 = await prisma.guideline.findMany({
      where: { title: { in: ['Urgencia', 'Objeci√≥n de Precio', 'Personalizaci√≥n', 'Confirmar Entendimiento'] } }
    });
    for (const guideline of guidelines2_4) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session2.id,
          messageId: message2_4.id,
          guidelineId: guideline.id
        }
      });
    }

    const guidelines2_6 = await prisma.guideline.findMany({
      where: { title: { in: ['Urgencia', 'Personalizaci√≥n', 'Seguimiento', 'Confirmar Entendimiento'] } }
    });
    for (const guideline of guidelines2_6) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session2.id,
          messageId: message2_6.id,
          guidelineId: guideline.id
        }
      });
    }

    console.log(`‚úÖ Created session 2 with 6 messages (3 user, 3 assistant)`);

    // SESSION 3: Consulta t√©cnica especializada
    const session3 = await prisma.session.create({
      data: {}
    });
    console.log(`‚úÖ Created session 3: ${session3.id}`);

    // User message 1
    await prisma.message.create({
      data: {
        sessionId: session3.id,
        role: 'user',
        content: '¬øPueden implementar una API personalizada? Necesito algo t√©cnico pero que sea f√°cil de usar'
      }
    });

    // Assistant response 1
    const message3_2 = await prisma.message.create({
      data: {
        sessionId: session3.id,
        role: 'assistant',
        content: '¬°Por supuesto! Podemos desarrollar una API completamente personalizada para ti. Para asegurarme de que la soluci√≥n sea tanto t√©cnica como f√°cil de usar, me gustar√≠a entender mejor tu caso de uso espec√≠fico. ¬øPodr√≠as contarme qu√© tipo de integraci√≥n necesitas y con qu√© sistemas? Tenemos experiencia en crear APIs intuitivas que simplifican procesos complejos.'
      }
    });

    // User message 2
    await prisma.message.create({
      data: {
        sessionId: session3.id,
        role: 'user',
        content: 'Necesito integrar con Salesforce y un sistema de facturaci√≥n personalizado. ¬øEs muy complejo?'
      }
    });

    // Assistant response 2
    const message3_4 = await prisma.message.create({
      data: {
        sessionId: session3.id,
        role: 'assistant',
        content: 'No es complejo para nosotros, pero entiendo tu preocupaci√≥n. Hemos implementado m√°s de 50 integraciones con Salesforce y sistemas de facturaci√≥n. Te explico de manera simple: crearemos un "puente" que conecte ambos sistemas autom√°ticamente. Los datos se sincronizar√°n en tiempo real sin que tengas que hacer nada manual. ¬øTe parece bien si te muestro algunos ejemplos de integraciones similares que hemos hecho?'
      }
    });

    // User message 3
    await prisma.message.create({
      data: {
        sessionId: session3.id,
        role: 'user',
        content: 'S√≠, me gustar√≠a ver ejemplos. ¬øCu√°nto tiempo tomar√≠a y qu√© necesito proporcionarles?'
      }
    });

    // Assistant response 3
    const message3_6 = await prisma.message.create({
      data: {
        sessionId: session3.id,
        role: 'assistant',
        content: 'Perfecto. Te voy a enviar algunos casos de √©xito relevantes por email. Para la implementaci√≥n, necesitar√≠amos acceso a tu instancia de Salesforce (solo lectura) y la documentaci√≥n de tu sistema de facturaci√≥n. El desarrollo completo tomar√≠a entre 4-6 semanas. Para darte una propuesta detallada y timeline preciso, ¬øpodemos agendar una reuni√≥n t√©cnica donde revisemos tus sistemas actuales?'
      }
    });

    // Apply guidelines to assistant messages
    const guidelines3_2 = await prisma.guideline.findMany({
      where: { title: { in: ['Jerga T√©cnica', 'Personalizaci√≥n', 'Contexto del Cliente'] } }
    });
    for (const guideline of guidelines3_2) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session3.id,
          messageId: message3_2.id,
          guidelineId: guideline.id
        }
      });
    }

    const guidelines3_4 = await prisma.guideline.findMany({
      where: { title: { in: ['Jerga T√©cnica', 'Casos de √âxito', 'Personalizaci√≥n'] } }
    });
    for (const guideline of guidelines3_4) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session3.id,
          messageId: message3_4.id,
          guidelineId: guideline.id
        }
      });
    }

    const guidelines3_6 = await prisma.guideline.findMany({
      where: { title: { in: ['Casos de √âxito', 'Personalizaci√≥n', 'Seguimiento', 'Confirmar Entendimiento'] } }
    });
    for (const guideline of guidelines3_6) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session3.id,
          messageId: message3_6.id,
          guidelineId: guideline.id
        }
      });
    }

    console.log(`‚úÖ Created session 3 with 6 messages (3 user, 3 assistant)`);

    // SESSION 4: Consulta de soporte post-venta
    const session4 = await prisma.session.create({
      data: {}
    });
    console.log(`‚úÖ Created session 4: ${session4.id}`);

    // User message 1
    await prisma.message.create({
      data: {
        sessionId: session4.id,
        role: 'user',
        content: 'Hola, ya tenemos implementado el sistema desde hace 3 meses y necesitamos soporte t√©cnico'
      }
    });

    // Assistant response 1
    const message4_2 = await prisma.message.create({
      data: {
        sessionId: session4.id,
        role: 'assistant',
        content: '¬°Hola! Me alegra que ya est√©n usando nuestro sistema. Para poder ayudarte mejor con el soporte t√©cnico, ¬øpodr√≠as contarme qu√© tipo de problema est√°n experimentando? Tambi√©n me gustar√≠a confirmar: ¬øest√°n usando la versi√≥n m√°s reciente del sistema? Esto me ayudar√° a darte la soluci√≥n m√°s efectiva.'
      }
    });

    // User message 2
    await prisma.message.create({
      data: {
        sessionId: session4.id,
        role: 'user',
        content: 'Tenemos problemas con la sincronizaci√≥n de datos y algunos usuarios no pueden acceder al sistema'
      }
    });

    // Assistant response 2
    const message4_4 = await prisma.message.create({
      data: {
        sessionId: session4.id,
        role: 'assistant',
        content: 'Entiendo el problema. Los problemas de sincronizaci√≥n y acceso son cr√≠ticos y los tratamos con prioridad alta. Para resolver esto r√°pidamente, necesito que me proporciones algunos detalles t√©cnicos: ¬øcu√°ntos usuarios est√°n afectados? ¬øEl problema es intermitente o constante? Mientras tanto, voy a escalar esto a nuestro equipo de soporte t√©cnico para que puedan conectarse remotamente y diagnosticar el problema.'
      }
    });

    // User message 3
    await prisma.message.create({
      data: {
        sessionId: session4.id,
        role: 'user',
        content: 'Son unos 15 usuarios afectados y el problema es constante desde ayer. ¬øPueden venir hoy mismo?'
      }
    });

    // Assistant response 3
    const message4_6 = await prisma.message.create({
      data: {
        sessionId: session4.id,
        role: 'assistant',
        content: 'S√≠, podemos enviar un t√©cnico hoy mismo. Dado que son 15 usuarios afectados y el problema es constante, esto califica como incidente cr√≠tico. Voy a programar una visita t√©cnica para esta tarde. Mientras tanto, nuestro equipo remoto ya est√° trabajando en el diagn√≥stico. Para minimizar el impacto, ¬øpodr√≠as proporcionar acceso temporal a un usuario administrativo para que podamos revisar los logs del sistema?'
      }
    });

    // Apply guidelines to assistant messages
    const guidelines4_2 = await prisma.guideline.findMany({
      where: { title: { in: ['Seguimiento', 'Contexto del Cliente', 'Confirmar Entendimiento'] } }
    });
    for (const guideline of guidelines4_2) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session4.id,
          messageId: message4_2.id,
          guidelineId: guideline.id
        }
      });
    }

    const guidelines4_4 = await prisma.guideline.findMany({
      where: { title: { in: ['Urgencia', 'Personalizaci√≥n', 'Seguimiento'] } }
    });
    for (const guideline of guidelines4_4) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session4.id,
          messageId: message4_4.id,
          guidelineId: guideline.id
        }
      });
    }

    const guidelines4_6 = await prisma.guideline.findMany({
      where: { title: { in: ['Urgencia', 'Personalizaci√≥n', 'Seguimiento', 'Confirmar Entendimiento'] } }
    });
    for (const guideline of guidelines4_6) {
      await prisma.guidelineUsage.create({
        data: {
          sessionId: session4.id,
          messageId: message4_6.id,
          guidelineId: guideline.id
        }
      });
    }

    console.log(`‚úÖ Created session 4 with 6 messages (3 user, 3 assistant)`);

    console.log(`üéâ Successfully seeded ${4} sessions with realistic conversations!`);
    console.log(`üìä Total: ${4 * 6} messages (${4 * 3} user, ${4 * 3} assistant)`);
    console.log(`üîó Multiple guidelines applied to each assistant message`);
  }
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
